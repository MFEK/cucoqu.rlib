var searchIndex = JSON.parse('{\
"cucoqu":{"doc":"cucoqu.rlib — convert cubic, conic, and quadratic bezier …","t":[12,6,6,8,3,3,8,6,6,11,11,11,11,11,11,11,11,11,11,11,11,0,0,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,14,11,11,11,11,11,11,11,11,0,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,10,11,12,8,8,3,4,13,13,17,13,8,11,10,11,11,11,11,11,11,11,10,11,10,11,11,11,11,11,12,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,10,11,12,10,11,11,11,11,11,11,11,11,11,11,11,11,11,12,3,8,8,8,8,10,10,10,11,11,10,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,10],"n":["0","Cubic","CubicSpline","DerivativeCoefficients","Point","Point3","Point3Like","Quad","QuadSpline","add","approx_control","approx_quadratic","approx_spline","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","co2qu","cu2qu","curve_to_quadratic","default","default","deref","deref_mut","deriv_coeff","descendants","descendants","div","eq","farthest_fit_inside","fmt","fmt","from","from","from","from_subset","from_subset","from_xy","height","height","into","into","into","is_in_subset","is_in_subset","mul","new","new","point","point","postorder","postorder","postorder_with_size_hint","postorder_with_size_hint","preorder","preorder","preorder_with_size_hint","preorder_with_size_hint","qu2cu","set_x","set_x","set_y","set_y","set_z","set_z","sub","to_owned","to_owned","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_into","try_into","type_id","type_id","x","x","x","y","y","y","z","z","z","BelowQuadTolerance","Chop","Conic","ConicKind","Ellipse","Hyperbola","MAX_QUAD_POW2","Parabola","QuadPowerOf2","as_quads","below_quad_tolerance","below_quad_tolerance","borrow","borrow","borrow_mut","borrow_mut","chop","chop","chop_at","chop_at","chop_at_t2","chop_at_t2","clone","clone","clone_into","clone_into","control","default","deriv_coeff","descendants","descendants","end","from","from","from_subset","from_subset","height","height","into","into","is_in_subset","is_in_subset","kind","new","postorder","postorder","postorder_with_size_hint","postorder_with_size_hint","preorder","preorder","preorder_with_size_hint","preorder_with_size_hint","quad_error","quad_error","quad_pow2","quad_pow2","start","subdivide","subdivide","to_owned","to_owned","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_into","try_into","type_id","type_id","weight","ApproxNotFoundError","CubicApprox","CubicFarthestFitInside","CurveToQuadratic","CurvesToQuadratic","approx_control","approx_quadratic","approx_spline","borrow","borrow_mut","curve_to_quadratic","curves_to_quadratic","descendants","description","farthest_fit_inside","fmt","fmt","from","from_subset","height","into","is_in_subset","postorder","postorder_with_size_hint","preorder","preorder_with_size_hint","provide","to_string","to_subset","to_subset_unchecked","try_from","try_into","type_id","QuadToCubic","quad_to_cubic"],"q":["cucoqu","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","cucoqu::co2qu","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","cucoqu::cu2qu","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","cucoqu::qu2cu",""],"d":["","A cubic <code>Bezier</code> segment.","A cubic spline.","The trait for types which implement the calculation of …","A two-dimensional point (with x and y coordinates).","A 3D point type, containing X, Y, and Z coordinates.","","A quadratic <code>Bezier</code> segment.","A quadratic spline.","","","","","","","","","","","","","co2qu.rs — rational (“conic”) quadratic Bézier to …","cu2qu.rs — cubic Bézier to quadratic Bézier","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","","Calls <code>U::from(self)</code>.","","","","Construct a new point.","","Convenience point constructor.","Convenience point constructor.","","","","","","","","","qu2cu.rs — quadratic to cubic Bézier","","","","","","","","","","","","","","","","","","","","","","","","","","Fetch the Z coordinate.","","","Trait for calculating whether or not a value is below the …","The trait allowing the curve to be subdivided into smaller …","A conic is defined by two end points <code>start</code> and <code>end</code> and a …","Defines the type of conic being used.","If <em>w</em> is less than 1.","If <em>w</em> is greater than 1.","","If <em>w</em> is exactly equal (within ε) to 1.","Compute the number of subdivisions needed to approximate …","","","","","","","","chop into 2 conics, with the first conic be the portion …","chop into 2 conics, with the first conic be the portion …","divide curve into two at t","","get a subsection of the curve from t1…t2","","","","","","","","Compute the coefficients of the derivative of the conic.","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Compute the number of subdivisions needed to approximate …","","","splits the curve into <code>2^level+1</code> linear pieces.","","","","","","","","","","","","","","The weight of the conic. If <em>w</em>==1, parabolic. If <em>w</em> &lt; 1, …","“Could not approximate cubic curve with a quadratic”","Cubic Bézier approximation with N quadratic splines","Trait that returns true if the control point of a …","Convert a cubic Bézier curve to a quadratic spline …","Convert a vector of cubic Bézier curves to a vector of …","Calculates the approximate control point of a cubic …","Returns a quadratic representation with a tolerance error.","Returns an array of quadratic spline segments with a …","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Trait for exact cubic Bézier curve generation from …",""],"i":[1,0,0,0,0,0,0,0,0,1,2,2,2,9,1,9,1,9,1,9,1,0,0,2,9,1,1,1,26,9,1,1,1,2,9,1,9,1,1,9,1,1,9,1,9,9,1,9,1,1,9,1,0,0,9,1,9,1,9,1,9,1,0,9,1,9,1,27,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,9,1,9,27,9,9,0,0,0,0,21,21,0,21,0,20,28,20,20,21,20,21,29,29,29,20,29,20,20,21,20,21,20,20,20,20,21,20,20,21,20,21,20,21,20,21,20,21,20,20,20,21,20,21,20,21,20,21,28,20,30,20,20,29,20,20,21,20,21,20,21,20,21,20,21,20,21,20,0,0,0,0,0,31,31,31,5,5,32,33,5,5,34,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,35],"f":[0,0,0,0,0,0,0,0,0,[[1,1],1],[[2,3],1],[[2,3],[[6,[4,5]]]],[[2,7,3],[[6,[8,5]]]],[[]],[[]],[[]],[[]],[9,9],[1,1],[[]],[[]],0,0,[[2,3],[[6,[8,5]]]],[[],9],[[],1],[1],[1],[[]],[7,7],[7,7],[1,1],[[1,1],10],[[2,3],10],[[9,11],12],[[1,11],12],[[]],[[]],[[[15,[3,13,13,[14,[3]]]]],1],[[]],[[]],[[3,3],1],[[],7],[[],7],[[]],[9,1],[[]],[[],10],[[],10],[1,1],[[[16,[3]],[16,[3]],[16,[3]]],9],[[[15,[3,13,13,[14,[3]]]]],1],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[9,17]],[[1,17]],[[9,17]],[[1,17]],[17],[[9,17]],[[1,1],1],[[]],[[]],[[],18],[[],18],[[]],[[]],[[],6],[[],6],[[],6],[[],6],[[],19],[[],19],[9,17],[1,17],0,[9,17],[1,17],0,[[],17],[9,17],0,0,0,0,0,0,0,0,0,0,[[20,3],8],[3,10],[[20,3],10],[[]],[[]],[[]],[[]],[[]],[[]],[3,10],[[20,3],10],[[3,3]],[[20,3,3],20],[20,20],[21,21],[[]],[[]],0,[[],20],[20],[7,7],[7,7],0,[[]],[[]],[[]],[[]],[[],7],[[],7],[[]],[[]],[[],10],[[],10],[20,21],[[1,1,1,3],20],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[20],[3,7],[[20,3],7],0,[7,22],[[20,7],[[22,[20]]]],[[]],[[]],[[],18],[[],18],[[]],[[]],[[],6],[[],6],[[],6],[[],6],[[],19],[[],19],0,0,0,0,0,0,[3,1],[3,[[6,[4,5]]]],[[7,3],[[6,[8,5]]]],[[]],[[]],[3,[[6,[8,5]]]],[[[22,[3]]],[[6,[[22,[8]],5]]]],[7,7],[5,23],[3,10],[[5,11],12],[[5,11],12],[[]],[[]],[[],7],[[]],[[],10],[[]],[[]],[[]],[[]],[24],[[],25],[[],18],[[]],[[],6],[[],6],[[],19],0,[[]]],"p":[[3,"Point"],[6,"Cubic"],[15,"f32"],[6,"Quad"],[3,"ApproxNotFoundError"],[4,"Result"],[15,"usize"],[6,"QuadSpline"],[3,"Point3"],[15,"bool"],[3,"Formatter"],[6,"Result"],[3,"Const"],[3,"ArrayStorage"],[3,"Matrix"],[8,"Into"],[4,"IntegerOrFloat"],[4,"Option"],[3,"TypeId"],[3,"Conic"],[4,"ConicKind"],[3,"Vec"],[15,"str"],[3,"Demand"],[3,"String"],[8,"DerivativeCoefficients"],[8,"Point3Like"],[8,"BelowQuadTolerance"],[8,"Chop"],[8,"QuadPowerOf2"],[8,"CubicApprox"],[8,"CurveToQuadratic"],[8,"CurvesToQuadratic"],[8,"CubicFarthestFitInside"],[8,"QuadToCubic"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
